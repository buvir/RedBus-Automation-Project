from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
import pandas as pd

# Initialize the Chrome driver
driver = webdriver.Chrome()

# Navigate to the RedBus website
driver.get('https://www.redbus.in/')
driver.maximize_window()
time.sleep(5)

try:
    # Hover over and click the APSRTC option
    hover_element = driver.find_element(By.CLASS_NAME, "rtcName")
    action = ActionChains(driver)
    action.move_to_element(hover_element).perform()
    time.sleep(3)

    apsrtc_option = WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable((By.XPATH, "//div[contains(@class, 'rtcName') and text()='APSRTC']"))
    )
    apsrtc_option.click()
    time.sleep(5)

    # Select a route
    routes = driver.find_elements(By.XPATH, "//a[@class='route']")
    if not routes:
        print("No routes found.")
        driver.quit()
        exit()

    # Use the first route
    route_link = routes[0].get_attribute("href")
    route_name = routes[0].text
    driver.get(route_link)
    time.sleep(5)

    # Check for buses
    bus_elements = driver.find_elements(By.XPATH, "//div[@class='travels lh-24 f-bold d-color']")
    if not bus_elements:
        print("No buses found. Attempting alternative method...")
        fallback_element = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, '//*[@id="fixer"]/div/div/div[1]/span[3]/i'))
        )
        action.move_to_element(fallback_element).pause(1).click().perform()
        time.sleep(5)

    # Scrolling and extracting buses
    scroll_count = 0
    bus_data = []

    while scroll_count < 5:  # Scroll up to 5 times
        driver.find_element(By.TAG_NAME, "body").send_keys(Keys.PAGE_DOWN)
        time.sleep(7)
        scroll_count += 1

        # Fetch bus details
        bus_names = driver.find_elements(By.XPATH, "//div[@class='travels lh-24 f-bold d-color']")
        bus_types = driver.find_elements(By.XPATH, "//div[@class='bus-type f-12 m-top-16 l-color evBus']")
        departing_times = driver.find_elements(By.XPATH, "//div[@class='dp-time f-19 d-color f-bold']")
        durations = driver.find_elements(By.XPATH, "//div[@class='dur l-color lh-24']")
        reaching_times = driver.find_elements(By.XPATH, "//div[@class='bp-time f-19 d-color disp-Inline']")
        star_ratings = driver.find_elements(By.XPATH, "//span[contains(text(), '.') and string-length(text()) > 2]")
        prices = driver.find_elements(By.XPATH, "//div[contains(@class, 'fare')]/span[contains(@class, 'f-19')]")
        seats_available = driver.find_elements(By.XPATH, "//div[contains(@class, 'seat-left')]")

        # Find the minimum length to avoid mismatches
        min_length = min(len(bus_names), len(bus_types), len(departing_times), len(durations),
                         len(reaching_times), len(star_ratings), len(prices), len(seats_available))

        for i in range(min_length):
            bus_info = {
                "route_name": route_name,
                "route_link": route_link,
                "bus_name": bus_names[i].text,
                "bus_type": bus_types[i].text,
                "departing_time": departing_times[i].text,
                "duration": durations[i].text,
                "reaching_time": reaching_times[i].text,
                "star_rating": star_ratings[i].text,
                "price": prices[i].text.replace('â‚¹', '').strip(),
                "seats_available": seats_available[i].text.replace('Seats available', '').strip(),
            }
            if bus_info not in bus_data:  # Avoid duplicates
                bus_data.append(bus_info)

        print(f"Scroll {scroll_count}: Found {len(bus_data)} unique buses.")

        if len(bus_data) >= 10:  # Stop once 10 buses are collected
            break

    # Print the collected data
    print("\nCollected Bus Data:")
    for bus in bus_data[:10]:  # Limit output to 10 buses
        print(bus)

except Exception as e:
    print(f"An error occurred: {e}")

finally:
    driver.quit()
